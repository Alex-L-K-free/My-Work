{"ast":null,"code":"// mysite_staz/frontend/src/dashboard.js\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from './axiosConfig';\n//\n// const Dashboard = ({ token, setToken }) => {\n//     const [userData, setUserData] = useState(null); // Данные пользователя\n//     const [loading, setLoading] = useState(true); // Индикатор загрузки\n//     const [error, setError] = useState(''); // Сообщение об ошибке\n//\n//     // Запрос данных о пользователе при загрузке компонента\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const response = await axiosInstance.get('/user/', {\n//                     headers: {\n//                         Authorization: `Bearer ${token}`, // Использование токена для авторизации\n//                     },\n//                 });\n//                 setUserData(response.data); // Установка данных пользователя\n//             } catch (err) {\n//                 setError('Ошибка при загрузке данных пользователя'); // Установка сообщения об ошибке\n//             } finally {\n//                 setLoading(false); // Окончание загрузки\n//             }\n//         };\n//\n//         if (token) {\n//             fetchData();\n//         } else {\n//             setError('Токен не предоставлен'); // Ошибка, если токен отсутствует\n//             setLoading(false);\n//         }\n//     }, [token]); // Зависимость от токена\n//\n//     // Функция для выхода из системы\n//     const handleLogout = () => {\n//         setToken(''); // Сброс токена в состоянии\n//         localStorage.removeItem('access_token'); // Удаление токена из локального хранилища\n//     };\n//\n//     // Отображение состояния загрузки\n//     if (loading) {\n//         return <div>Загрузка...</div>;\n//     }\n//\n//     // Деструктуризация данных пользователя\n//     const { username, email } = userData || {};\n//\n//     // Рендеринг компонента\n//     return (\n//         <div className=\"dashboard\">\n//             {error ? (\n//                 <div>{error}</div> // Отображение ошибки\n//             ) : (\n//                 <div>\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\n//                     <p>Email: {email || 'Нет данных'}</p>\n//                     <button onClick={handleLogout}>Выйти</button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n//\n// export default Dashboard;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import axiosInstance from './axiosConfig';\n//\n// const Dashboard = ({ token, setToken }) => {\n//     const [userData, setUserData] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState('');\n//\n//     // Запрос данных о пользователе при загрузке компонента\n//      useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const response = await axiosInstance.get('/user/');\n//                 setUserData(response.data);\n//             } catch (err) {\n//                 setError('Ошибка при загрузке данных пользователя');\n//             }\n//         };\n//\n//         fetchData();\n//     }, []);\n// };\n//     // useEffect(() => {\n//     //     const fetchData = async () => {\n//     //         if (token) {\n//     //             try {\n//     //                 const response = await axios.get('http://localhost:8000/api/user/', {\n//     //                     headers: {\n//     //                         Authorization: `Bearer ${token}`,\n//     //                     },\n//     //                 });\n//     //                 setUserData(response.data);\n//     //             } catch (err) {\n//     //                 setError('Ошибка при загрузке данных пользователя');\n//     //             } finally {\n//     //                 setLoading(false);\n//     //             }\n//     //         }\n//     //     };\n//     //\n//     //     fetchData();\n//     // }, [token]);\n//\n//     // Функция для выхода из системы\n//     const handleLogout = () => {\n//         setToken('');\n//         localStorage.removeItem('access_token');\n//     };\n//\n//     if (loading) {\n//         return <div>Загрузка...</div>;\n//     }\n//\n//     const { username, email } = userData || {};\n//\n//     return (\n//         <div className=\"dashboard\">\n//             {error ? (\n//                 <div>{error}</div>\n//             ) : (\n//                 <div>\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\n//                     <p>Email: {email || 'Нет данных'}</p>\n//                     <button onClick={handleLogout}>Выйти</button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n//\n// export default Dashboard;","map":{"version":3,"names":[],"sources":["C:/Users/kiyko/MyPythonProject/StazProject/mysite_staz/frontend/src/Dashboard.js"],"sourcesContent":["// mysite_staz/frontend/src/dashboard.js\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axiosInstance from './axiosConfig';\r\n//\r\n// const Dashboard = ({ token, setToken }) => {\r\n//     const [userData, setUserData] = useState(null); // Данные пользователя\r\n//     const [loading, setLoading] = useState(true); // Индикатор загрузки\r\n//     const [error, setError] = useState(''); // Сообщение об ошибке\r\n//\r\n//     // Запрос данных о пользователе при загрузке компонента\r\n//     useEffect(() => {\r\n//         const fetchData = async () => {\r\n//             try {\r\n//                 const response = await axiosInstance.get('/user/', {\r\n//                     headers: {\r\n//                         Authorization: `Bearer ${token}`, // Использование токена для авторизации\r\n//                     },\r\n//                 });\r\n//                 setUserData(response.data); // Установка данных пользователя\r\n//             } catch (err) {\r\n//                 setError('Ошибка при загрузке данных пользователя'); // Установка сообщения об ошибке\r\n//             } finally {\r\n//                 setLoading(false); // Окончание загрузки\r\n//             }\r\n//         };\r\n//\r\n//         if (token) {\r\n//             fetchData();\r\n//         } else {\r\n//             setError('Токен не предоставлен'); // Ошибка, если токен отсутствует\r\n//             setLoading(false);\r\n//         }\r\n//     }, [token]); // Зависимость от токена\r\n//\r\n//     // Функция для выхода из системы\r\n//     const handleLogout = () => {\r\n//         setToken(''); // Сброс токена в состоянии\r\n//         localStorage.removeItem('access_token'); // Удаление токена из локального хранилища\r\n//     };\r\n//\r\n//     // Отображение состояния загрузки\r\n//     if (loading) {\r\n//         return <div>Загрузка...</div>;\r\n//     }\r\n//\r\n//     // Деструктуризация данных пользователя\r\n//     const { username, email } = userData || {};\r\n//\r\n//     // Рендеринг компонента\r\n//     return (\r\n//         <div className=\"dashboard\">\r\n//             {error ? (\r\n//                 <div>{error}</div> // Отображение ошибки\r\n//             ) : (\r\n//                 <div>\r\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\r\n//                     <p>Email: {email || 'Нет данных'}</p>\r\n//                     <button onClick={handleLogout}>Выйти</button>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default Dashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import axiosInstance from './axiosConfig';\r\n//\r\n// const Dashboard = ({ token, setToken }) => {\r\n//     const [userData, setUserData] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [error, setError] = useState('');\r\n//\r\n//     // Запрос данных о пользователе при загрузке компонента\r\n//      useEffect(() => {\r\n//         const fetchData = async () => {\r\n//             try {\r\n//                 const response = await axiosInstance.get('/user/');\r\n//                 setUserData(response.data);\r\n//             } catch (err) {\r\n//                 setError('Ошибка при загрузке данных пользователя');\r\n//             }\r\n//         };\r\n//\r\n//         fetchData();\r\n//     }, []);\r\n// };\r\n//     // useEffect(() => {\r\n//     //     const fetchData = async () => {\r\n//     //         if (token) {\r\n//     //             try {\r\n//     //                 const response = await axios.get('http://localhost:8000/api/user/', {\r\n//     //                     headers: {\r\n//     //                         Authorization: `Bearer ${token}`,\r\n//     //                     },\r\n//     //                 });\r\n//     //                 setUserData(response.data);\r\n//     //             } catch (err) {\r\n//     //                 setError('Ошибка при загрузке данных пользователя');\r\n//     //             } finally {\r\n//     //                 setLoading(false);\r\n//     //             }\r\n//     //         }\r\n//     //     };\r\n//     //\r\n//     //     fetchData();\r\n//     // }, [token]);\r\n//\r\n//     // Функция для выхода из системы\r\n//     const handleLogout = () => {\r\n//         setToken('');\r\n//         localStorage.removeItem('access_token');\r\n//     };\r\n//\r\n//     if (loading) {\r\n//         return <div>Загрузка...</div>;\r\n//     }\r\n//\r\n//     const { username, email } = userData || {};\r\n//\r\n//     return (\r\n//         <div className=\"dashboard\">\r\n//             {error ? (\r\n//                 <div>{error}</div>\r\n//             ) : (\r\n//                 <div>\r\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\r\n//                     <p>Email: {email || 'Нет данных'}</p>\r\n//                     <button onClick={handleLogout}>Выйти</button>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default Dashboard;\r\n"],"mappings":"AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}