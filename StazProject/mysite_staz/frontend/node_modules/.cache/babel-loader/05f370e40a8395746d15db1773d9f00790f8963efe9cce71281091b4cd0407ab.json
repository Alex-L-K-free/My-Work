{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiyko\\\\MyPythonProject\\\\StazProject\\\\mysite_staz\\\\frontend\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// mysite_staz/frontend/src/dashboard.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  token,\n  setToken\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/api/user/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setUserData(response.data);\n      } catch (err) {\n        setError('Ошибка при загрузке данных пользователя.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [token]);\n  const handleLogout = () => {\n    setToken('');\n    localStorage.removeItem('access_token');\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u0414\\u043E\\u0431\\u0440\\u043E \\u043F\\u043E\\u0436\\u0430\\u043B\\u043E\\u0432\\u0430\\u0442\\u044C, \", (userData === null || userData === void 0 ? void 0 : userData.username) || 'Пользователь', \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Email: \", (userData === null || userData === void 0 ? void 0 : userData.email) || 'Нет данных']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      children: \"\\u0412\\u044B\\u0439\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"9qxx9VJaR1hdflBFrFjfMt+C/+A=\");\n_c = Dashboard;\nexport default Dashboard;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from './axiosConfig';\n//\n// const Dashboard = ({ token, setToken }) => {\n//     const [userData, setUserData] = useState(null); // Данные пользователя\n//     const [loading, setLoading] = useState(true); // Индикатор загрузки\n//     const [error, setError] = useState(''); // Сообщение об ошибке\n//\n//     // Запрос данных о пользователе при загрузке компонента\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const response = await axiosInstance.get('/user/', {\n//                     headers: {\n//                         Authorization: `Bearer ${token}`, // Использование токена для авторизации\n//                     },\n//                 });\n//                 setUserData(response.data); // Установка данных пользователя\n//             } catch (err) {\n//                 setError('Ошибка при загрузке данных пользователя'); // Установка сообщения об ошибке\n//             } finally {\n//                 setLoading(false); // Окончание загрузки\n//             }\n//         };\n//\n//         if (token) {\n//             fetchData();\n//         } else {\n//             setError('Токен не предоставлен'); // Ошибка, если токен отсутствует\n//             setLoading(false);\n//         }\n//     }, [token]); // Зависимость от токена\n//\n//     // Функция для выхода из системы\n//     const handleLogout = () => {\n//         setToken(''); // Сброс токена в состоянии\n//         localStorage.removeItem('access_token'); // Удаление токена из локального хранилища\n//     };\n//\n//     // Отображение состояния загрузки\n//     if (loading) {\n//         return <div>Загрузка...</div>;\n//     }\n//\n//     // Деструктуризация данных пользователя\n//     const { username, email } = userData || {};\n//\n//     // Рендеринг компонента\n//     return (\n//         <div className=\"dashboard\">\n//             {error ? (\n//                 <div>{error}</div> // Отображение ошибки\n//             ) : (\n//                 <div>\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\n//                     <p>Email: {email || 'Нет данных'}</p>\n//                     <button onClick={handleLogout}>Выйти</button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n//\n// export default Dashboard;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import axiosInstance from './axiosConfig';\n//\n// const Dashboard = ({ token, setToken }) => {\n//     const [userData, setUserData] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState('');\n//\n//     // Запрос данных о пользователе при загрузке компонента\n//      useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const response = await axiosInstance.get('/user/');\n//                 setUserData(response.data);\n//             } catch (err) {\n//                 setError('Ошибка при загрузке данных пользователя');\n//             }\n//         };\n//\n//         fetchData();\n//     }, []);\n// };\n//     // useEffect(() => {\n//     //     const fetchData = async () => {\n//     //         if (token) {\n//     //             try {\n//     //                 const response = await axios.get('http://localhost:8000/api/user/', {\n//     //                     headers: {\n//     //                         Authorization: `Bearer ${token}`,\n//     //                     },\n//     //                 });\n//     //                 setUserData(response.data);\n//     //             } catch (err) {\n//     //                 setError('Ошибка при загрузке данных пользователя');\n//     //             } finally {\n//     //                 setLoading(false);\n//     //             }\n//     //         }\n//     //     };\n//     //\n//     //     fetchData();\n//     // }, [token]);\n//\n//     // Функция для выхода из системы\n//     const handleLogout = () => {\n//         setToken('');\n//         localStorage.removeItem('access_token');\n//     };\n//\n//     if (loading) {\n//         return <div>Загрузка...</div>;\n//     }\n//\n//     const { username, email } = userData || {};\n//\n//     return (\n//         <div className=\"dashboard\">\n//             {error ? (\n//                 <div>{error}</div>\n//             ) : (\n//                 <div>\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\n//                     <p>Email: {email || 'Нет данных'}</p>\n//                     <button onClick={handleLogout}>Выйти</button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n//\n// export default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Dashboard","token","setToken","_s","userData","setUserData","loading","setLoading","error","setError","fetchData","response","get","headers","Authorization","data","err","handleLogout","localStorage","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","className","username","email","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kiyko/MyPythonProject/StazProject/mysite_staz/frontend/src/Dashboard.js"],"sourcesContent":["// mysite_staz/frontend/src/dashboard.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Dashboard = ({ token, setToken }) => {\r\n  const [userData, setUserData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/user/', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setUserData(response.data);\r\n      } catch (err) {\r\n        setError('Ошибка при загрузке данных пользователя.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [token]);\r\n\r\n  const handleLogout = () => {\r\n    setToken('');\r\n    localStorage.removeItem('access_token');\r\n  };\r\n\r\n  if (loading) return <div>Загрузка...</div>;\r\n\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h2>Добро пожаловать, {userData?.username || 'Пользователь'}!</h2>\r\n      <p>Email: {userData?.email || 'Нет данных'}</p>\r\n      <button onClick={handleLogout}>Выйти</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axiosInstance from './axiosConfig';\r\n//\r\n// const Dashboard = ({ token, setToken }) => {\r\n//     const [userData, setUserData] = useState(null); // Данные пользователя\r\n//     const [loading, setLoading] = useState(true); // Индикатор загрузки\r\n//     const [error, setError] = useState(''); // Сообщение об ошибке\r\n//\r\n//     // Запрос данных о пользователе при загрузке компонента\r\n//     useEffect(() => {\r\n//         const fetchData = async () => {\r\n//             try {\r\n//                 const response = await axiosInstance.get('/user/', {\r\n//                     headers: {\r\n//                         Authorization: `Bearer ${token}`, // Использование токена для авторизации\r\n//                     },\r\n//                 });\r\n//                 setUserData(response.data); // Установка данных пользователя\r\n//             } catch (err) {\r\n//                 setError('Ошибка при загрузке данных пользователя'); // Установка сообщения об ошибке\r\n//             } finally {\r\n//                 setLoading(false); // Окончание загрузки\r\n//             }\r\n//         };\r\n//\r\n//         if (token) {\r\n//             fetchData();\r\n//         } else {\r\n//             setError('Токен не предоставлен'); // Ошибка, если токен отсутствует\r\n//             setLoading(false);\r\n//         }\r\n//     }, [token]); // Зависимость от токена\r\n//\r\n//     // Функция для выхода из системы\r\n//     const handleLogout = () => {\r\n//         setToken(''); // Сброс токена в состоянии\r\n//         localStorage.removeItem('access_token'); // Удаление токена из локального хранилища\r\n//     };\r\n//\r\n//     // Отображение состояния загрузки\r\n//     if (loading) {\r\n//         return <div>Загрузка...</div>;\r\n//     }\r\n//\r\n//     // Деструктуризация данных пользователя\r\n//     const { username, email } = userData || {};\r\n//\r\n//     // Рендеринг компонента\r\n//     return (\r\n//         <div className=\"dashboard\">\r\n//             {error ? (\r\n//                 <div>{error}</div> // Отображение ошибки\r\n//             ) : (\r\n//                 <div>\r\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\r\n//                     <p>Email: {email || 'Нет данных'}</p>\r\n//                     <button onClick={handleLogout}>Выйти</button>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default Dashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import axiosInstance from './axiosConfig';\r\n//\r\n// const Dashboard = ({ token, setToken }) => {\r\n//     const [userData, setUserData] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [error, setError] = useState('');\r\n//\r\n//     // Запрос данных о пользователе при загрузке компонента\r\n//      useEffect(() => {\r\n//         const fetchData = async () => {\r\n//             try {\r\n//                 const response = await axiosInstance.get('/user/');\r\n//                 setUserData(response.data);\r\n//             } catch (err) {\r\n//                 setError('Ошибка при загрузке данных пользователя');\r\n//             }\r\n//         };\r\n//\r\n//         fetchData();\r\n//     }, []);\r\n// };\r\n//     // useEffect(() => {\r\n//     //     const fetchData = async () => {\r\n//     //         if (token) {\r\n//     //             try {\r\n//     //                 const response = await axios.get('http://localhost:8000/api/user/', {\r\n//     //                     headers: {\r\n//     //                         Authorization: `Bearer ${token}`,\r\n//     //                     },\r\n//     //                 });\r\n//     //                 setUserData(response.data);\r\n//     //             } catch (err) {\r\n//     //                 setError('Ошибка при загрузке данных пользователя');\r\n//     //             } finally {\r\n//     //                 setLoading(false);\r\n//     //             }\r\n//     //         }\r\n//     //     };\r\n//     //\r\n//     //     fetchData();\r\n//     // }, [token]);\r\n//\r\n//     // Функция для выхода из системы\r\n//     const handleLogout = () => {\r\n//         setToken('');\r\n//         localStorage.removeItem('access_token');\r\n//     };\r\n//\r\n//     if (loading) {\r\n//         return <div>Загрузка...</div>;\r\n//     }\r\n//\r\n//     const { username, email } = userData || {};\r\n//\r\n//     return (\r\n//         <div className=\"dashboard\">\r\n//             {error ? (\r\n//                 <div>{error}</div>\r\n//             ) : (\r\n//                 <div>\r\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\r\n//                     <p>Email: {email || 'Нет данных'}</p>\r\n//                     <button onClick={handleLogout}>Выйти</button>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default Dashboard;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,iCAAiC,EAAE;UAClEC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUb,KAAK;UAAG;QAC9C,CAAC,CAAC;QACFI,WAAW,CAACM,QAAQ,CAACI,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZP,QAAQ,CAAC,0CAA0C,CAAC;MACtD,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACT,KAAK,CAAC,CAAC;EAEX,MAAMgB,YAAY,GAAGA,CAAA,KAAM;IACzBf,QAAQ,CAAC,EAAE,CAAC;IACZgB,YAAY,CAACC,UAAU,CAAC,cAAc,CAAC;EACzC,CAAC;EAED,IAAIb,OAAO,EAAE,oBAAOP,OAAA;IAAAqB,QAAA,EAAK;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE1C,IAAIhB,KAAK,EAAE,oBAAOT,OAAA;IAAAqB,QAAA,EAAMZ;EAAK;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAEpC,oBACEzB,OAAA;IAAK0B,SAAS,EAAC,WAAW;IAAAL,QAAA,gBACxBrB,OAAA;MAAAqB,QAAA,GAAI,+FAAkB,EAAC,CAAAhB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEsB,QAAQ,KAAI,cAAc,EAAC,GAAC;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClEzB,OAAA;MAAAqB,QAAA,GAAG,SAAO,EAAC,CAAAhB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEuB,KAAK,KAAI,YAAY;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/CzB,OAAA;MAAQ6B,OAAO,EAAEX,YAAa;MAAAG,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV,CAAC;AAACrB,EAAA,CAtCIH,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAwCf,eAAeA,SAAS;;AAIxignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}