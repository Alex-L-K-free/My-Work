{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiyko\\\\MyPythonProject\\\\StazProject\\\\mysite_staz\\\\frontend\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// mysite_staz/frontend/src/dashboard.js\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from './axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  token,\n  setToken\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null); // Данные пользователя\n  const [loading, setLoading] = useState(true); // Индикатор загрузки\n  const [error, setError] = useState(''); // Сообщение об ошибке\n\n  // Запрос данных о пользователе при загрузке компонента\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axiosInstance.get('/user/', {\n          headers: {\n            Authorization: `Bearer ${token}` // Использование токена для авторизации\n          }\n        });\n        setUserData(response.data); // Установка данных пользователя\n      } catch (err) {\n        setError('Ошибка при загрузке данных пользователя'); // Установка сообщения об ошибке\n      } finally {\n        setLoading(false); // Окончание загрузки\n      }\n    };\n    if (token) {\n      fetchData();\n    } else {\n      setError('Токен не предоставлен'); // Ошибка, если токен отсутствует\n      setLoading(false);\n    }\n  }, [token]); // Зависимость от токена\n\n  // Функция для выхода из системы\n  const handleLogout = () => {\n    setToken(''); // Сброс токена в состоянии\n    localStorage.removeItem('access_token'); // Удаление токена из локального хранилища\n  };\n\n  // Отображение состояния загрузки\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Деструктуризация данных пользователя\n  const {\n    username,\n    email\n  } = userData || {};\n\n  // Рендеринг компонента\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this) // Отображение ошибки\n    : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0414\\u043E\\u0431\\u0440\\u043E \\u043F\\u043E\\u0436\\u0430\\u043B\\u043E\\u0432\\u0430\\u0442\\u044C, \", username || 'Пользователь', \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", email || 'Нет данных']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"\\u0412\\u044B\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"9qxx9VJaR1hdflBFrFjfMt+C/+A=\");\n_c = Dashboard;\nexport default Dashboard;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import axiosInstance from './axiosConfig';\n//\n// const Dashboard = ({ token, setToken }) => {\n//     const [userData, setUserData] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState('');\n//\n//     // Запрос данных о пользователе при загрузке компонента\n//      useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const response = await axiosInstance.get('/user/');\n//                 setUserData(response.data);\n//             } catch (err) {\n//                 setError('Ошибка при загрузке данных пользователя');\n//             }\n//         };\n//\n//         fetchData();\n//     }, []);\n// };\n//     // useEffect(() => {\n//     //     const fetchData = async () => {\n//     //         if (token) {\n//     //             try {\n//     //                 const response = await axios.get('http://localhost:8000/api/user/', {\n//     //                     headers: {\n//     //                         Authorization: `Bearer ${token}`,\n//     //                     },\n//     //                 });\n//     //                 setUserData(response.data);\n//     //             } catch (err) {\n//     //                 setError('Ошибка при загрузке данных пользователя');\n//     //             } finally {\n//     //                 setLoading(false);\n//     //             }\n//     //         }\n//     //     };\n//     //\n//     //     fetchData();\n//     // }, [token]);\n//\n//     // Функция для выхода из системы\n//     const handleLogout = () => {\n//         setToken('');\n//         localStorage.removeItem('access_token');\n//     };\n//\n//     if (loading) {\n//         return <div>Загрузка...</div>;\n//     }\n//\n//     const { username, email } = userData || {};\n//\n//     return (\n//         <div className=\"dashboard\">\n//             {error ? (\n//                 <div>{error}</div>\n//             ) : (\n//                 <div>\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\n//                     <p>Email: {email || 'Нет данных'}</p>\n//                     <button onClick={handleLogout}>Выйти</button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n//\n// export default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","Dashboard","token","setToken","_s","userData","setUserData","loading","setLoading","error","setError","fetchData","response","get","headers","Authorization","data","err","handleLogout","localStorage","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","username","email","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kiyko/MyPythonProject/StazProject/mysite_staz/frontend/src/Dashboard.js"],"sourcesContent":["// mysite_staz/frontend/src/dashboard.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axiosInstance from './axiosConfig';\r\n\r\nconst Dashboard = ({ token, setToken }) => {\r\n    const [userData, setUserData] = useState(null); // Данные пользователя\r\n    const [loading, setLoading] = useState(true); // Индикатор загрузки\r\n    const [error, setError] = useState(''); // Сообщение об ошибке\r\n\r\n    // Запрос данных о пользователе при загрузке компонента\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/user/', {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`, // Использование токена для авторизации\r\n                    },\r\n                });\r\n                setUserData(response.data); // Установка данных пользователя\r\n            } catch (err) {\r\n                setError('Ошибка при загрузке данных пользователя'); // Установка сообщения об ошибке\r\n            } finally {\r\n                setLoading(false); // Окончание загрузки\r\n            }\r\n        };\r\n\r\n        if (token) {\r\n            fetchData();\r\n        } else {\r\n            setError('Токен не предоставлен'); // Ошибка, если токен отсутствует\r\n            setLoading(false);\r\n        }\r\n    }, [token]); // Зависимость от токена\r\n\r\n    // Функция для выхода из системы\r\n    const handleLogout = () => {\r\n        setToken(''); // Сброс токена в состоянии\r\n        localStorage.removeItem('access_token'); // Удаление токена из локального хранилища\r\n    };\r\n\r\n    // Отображение состояния загрузки\r\n    if (loading) {\r\n        return <div>Загрузка...</div>;\r\n    }\r\n\r\n    // Деструктуризация данных пользователя\r\n    const { username, email } = userData || {};\r\n\r\n    // Рендеринг компонента\r\n    return (\r\n        <div className=\"dashboard\">\r\n            {error ? (\r\n                <div>{error}</div> // Отображение ошибки\r\n            ) : (\r\n                <div>\r\n                    <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\r\n                    <p>Email: {email || 'Нет данных'}</p>\r\n                    <button onClick={handleLogout}>Выйти</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import axiosInstance from './axiosConfig';\r\n//\r\n// const Dashboard = ({ token, setToken }) => {\r\n//     const [userData, setUserData] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [error, setError] = useState('');\r\n//\r\n//     // Запрос данных о пользователе при загрузке компонента\r\n//      useEffect(() => {\r\n//         const fetchData = async () => {\r\n//             try {\r\n//                 const response = await axiosInstance.get('/user/');\r\n//                 setUserData(response.data);\r\n//             } catch (err) {\r\n//                 setError('Ошибка при загрузке данных пользователя');\r\n//             }\r\n//         };\r\n//\r\n//         fetchData();\r\n//     }, []);\r\n// };\r\n//     // useEffect(() => {\r\n//     //     const fetchData = async () => {\r\n//     //         if (token) {\r\n//     //             try {\r\n//     //                 const response = await axios.get('http://localhost:8000/api/user/', {\r\n//     //                     headers: {\r\n//     //                         Authorization: `Bearer ${token}`,\r\n//     //                     },\r\n//     //                 });\r\n//     //                 setUserData(response.data);\r\n//     //             } catch (err) {\r\n//     //                 setError('Ошибка при загрузке данных пользователя');\r\n//     //             } finally {\r\n//     //                 setLoading(false);\r\n//     //             }\r\n//     //         }\r\n//     //     };\r\n//     //\r\n//     //     fetchData();\r\n//     // }, [token]);\r\n//\r\n//     // Функция для выхода из системы\r\n//     const handleLogout = () => {\r\n//         setToken('');\r\n//         localStorage.removeItem('access_token');\r\n//     };\r\n//\r\n//     if (loading) {\r\n//         return <div>Загрузка...</div>;\r\n//     }\r\n//\r\n//     const { username, email } = userData || {};\r\n//\r\n//     return (\r\n//         <div className=\"dashboard\">\r\n//             {error ? (\r\n//                 <div>{error}</div>\r\n//             ) : (\r\n//                 <div>\r\n//                     <h2>Добро пожаловать, {username || 'Пользователь'}!</h2>\r\n//                     <p>Email: {email || 'Нет данных'}</p>\r\n//                     <button onClick={handleLogout}>Выйти</button>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}